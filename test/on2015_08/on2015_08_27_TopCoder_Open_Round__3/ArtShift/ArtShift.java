package on2015_08.on2015_08_27_TopCoder_Open_Round__3.ArtShift;



import net.ogiekako.algorithm.math.MathUtils;
import net.ogiekako.algorithm.misc.embedding.EmbeddingUtils;

import java.util.Arrays;
import java.util.TreeSet;

public class ArtShift {
    private static void debug(Object... os) {
        System.out.println(Arrays.deepToString(os));
    }

    /**
     * distinct なループ
     * 最小公倍数が解
     * 最小公倍数の大きさはそんなにならないはず
     * DP
     * (x,y) -> 可能な周期数 set (divide or one loop)
     * one loop なら周期を (x+y) に(できれば) するのが得なはず
     * 実験
     */
    public int maxShifts(String sequence) {
        int x = 0, y = 0;
        for (char c : sequence.toCharArray()) {
            if (c == 'B') x++;
            else y++;
        }
        return res[x][y];
//        return solve(x, y);

    }

    int N = 31;

    TreeSet<Integer>[][] dp;
    private int solve(int x, int y) {
        if (dp == null) {
            int[][] loop = new int[N][N];
            for (int i = 0; i < N; i++) {
                for (int j = 0; j < N; j++) {
                    loop[i][j] = i == 0 || j == 0 ? 1 : i + j;
                }
            }
            dp = new TreeSet[N][N];
            for (int i = 0; i < N; i++) {
                for (int j = 0; j < N; j++) {
                    dp[i][j] = new TreeSet<Integer>();
                    dp[i][j].add(loop[i][j]);
                    if (i + j <= 0) continue;
                    for (int k = 0; k <= i; k++)
                        for (int l = 0; l <= j; l++) {
                            if (k + l <= 0 || k == i && l == j) continue;
                            int pi = i - k, pj = j - l;
                            for (int period : dp[pi][pj]) {
                                dp[i][j].add((int) MathUtils.lcm(period, loop[k][l]));
                            }
                        }
                }
            }
        }
        return dp[x][y].last();
    }

    public static void main(String[] args) {
        new ArtShift().dump();
    }

    private void dump() {
        int[][] res = new int[N][N];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                res[i][j] = solve(i,j);
            }
        }
        EmbeddingUtils.embedIntArray(res, "res");
    }
    int[][] res={{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
            {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,},
            {1,3,4,6,6,12,15,20,21,30,35,42,45,56,63,72,77,90,99,110,117,132,143,156,165,182,195,210,221,240,255,},
            {1,4,6,6,12,15,20,30,30,60,60,84,105,140,140,210,210,280,315,360,385,504,504,630,693,792,819,990,1001,1170,1287,},
            {1,5,6,12,15,20,30,30,60,60,84,105,140,210,210,420,420,420,420,840,840,1260,1260,1540,1540,2520,2520,3080,3465,3960,4095,},
            {1,6,12,15,20,30,30,60,60,84,105,140,210,210,420,420,420,420,840,840,1260,1260,1540,2310,2520,4620,4620,5460,5460,9240,9240,},
            {1,7,15,20,30,30,60,60,84,105,140,210,210,420,420,420,420,840,840,1260,1260,1540,2310,2520,4620,4620,5460,5460,9240,9240,13860,},
            {1,8,20,30,30,60,60,84,105,140,210,210,420,420,420,420,840,840,1260,1260,1540,2310,2520,4620,4620,5460,5460,9240,9240,13860,13860,},
            {1,9,21,30,60,60,84,105,140,210,210,420,420,420,420,840,840,1260,1260,1540,2310,2520,4620,4620,5460,5460,9240,9240,13860,13860,16380,},
            {1,10,30,60,60,84,105,140,210,210,420,420,420,420,840,840,1260,1260,1540,2310,2520,4620,4620,5460,5460,9240,9240,13860,13860,16380,16380,},
            {1,11,35,60,84,105,140,210,210,420,420,420,420,840,840,1260,1260,1540,2310,2520,4620,4620,5460,5460,9240,9240,13860,13860,16380,16380,27720,},
            {1,12,42,84,105,140,210,210,420,420,420,420,840,840,1260,1260,1540,2310,2520,4620,4620,5460,5460,9240,9240,13860,13860,16380,16380,27720,30030,},
            {1,13,45,105,140,210,210,420,420,420,420,840,840,1260,1260,1540,2310,2520,4620,4620,5460,5460,9240,9240,13860,13860,16380,16380,27720,30030,32760,},
            {1,14,56,140,210,210,420,420,420,420,840,840,1260,1260,1540,2310,2520,4620,4620,5460,5460,9240,9240,13860,13860,16380,16380,27720,30030,32760,60060,},
            {1,15,63,140,210,420,420,420,420,840,840,1260,1260,1540,2310,2520,4620,4620,5460,5460,9240,9240,13860,13860,16380,16380,27720,30030,32760,60060,60060,},
            {1,16,72,210,420,420,420,420,840,840,1260,1260,1540,2310,2520,4620,4620,5460,5460,9240,9240,13860,13860,16380,16380,27720,30030,32760,60060,60060,60060,},
            {1,17,77,210,420,420,420,840,840,1260,1260,1540,2310,2520,4620,4620,5460,5460,9240,9240,13860,13860,16380,16380,27720,30030,32760,60060,60060,60060,60060,},
            {1,18,90,280,420,420,840,840,1260,1260,1540,2310,2520,4620,4620,5460,5460,9240,9240,13860,13860,16380,16380,27720,30030,32760,60060,60060,60060,60060,120120,},
            {1,19,99,315,420,840,840,1260,1260,1540,2310,2520,4620,4620,5460,5460,9240,9240,13860,13860,16380,16380,27720,30030,32760,60060,60060,60060,60060,120120,120120,},
            {1,20,110,360,840,840,1260,1260,1540,2310,2520,4620,4620,5460,5460,9240,9240,13860,13860,16380,16380,27720,30030,32760,60060,60060,60060,60060,120120,120120,180180,},
            {1,21,117,385,840,1260,1260,1540,2310,2520,4620,4620,5460,5460,9240,9240,13860,13860,16380,16380,27720,30030,32760,60060,60060,60060,60060,120120,120120,180180,180180,},
            {1,22,132,504,1260,1260,1540,2310,2520,4620,4620,5460,5460,9240,9240,13860,13860,16380,16380,27720,30030,32760,60060,60060,60060,60060,120120,120120,180180,180180,180180,},
            {1,23,143,504,1260,1540,2310,2520,4620,4620,5460,5460,9240,9240,13860,13860,16380,16380,27720,30030,32760,60060,60060,60060,60060,120120,120120,180180,180180,180180,180180,},
            {1,24,156,630,1540,2310,2520,4620,4620,5460,5460,9240,9240,13860,13860,16380,16380,27720,30030,32760,60060,60060,60060,60060,120120,120120,180180,180180,180180,180180,360360,},
            {1,25,165,693,1540,2520,4620,4620,5460,5460,9240,9240,13860,13860,16380,16380,27720,30030,32760,60060,60060,60060,60060,120120,120120,180180,180180,180180,180180,360360,360360,},
            {1,26,182,792,2520,4620,4620,5460,5460,9240,9240,13860,13860,16380,16380,27720,30030,32760,60060,60060,60060,60060,120120,120120,180180,180180,180180,180180,360360,360360,360360,},
            {1,27,195,819,2520,4620,5460,5460,9240,9240,13860,13860,16380,16380,27720,30030,32760,60060,60060,60060,60060,120120,120120,180180,180180,180180,180180,360360,360360,360360,360360,},
            {1,28,210,990,3080,5460,5460,9240,9240,13860,13860,16380,16380,27720,30030,32760,60060,60060,60060,60060,120120,120120,180180,180180,180180,180180,360360,360360,360360,360360,471240,},
            {1,29,221,1001,3465,5460,9240,9240,13860,13860,16380,16380,27720,30030,32760,60060,60060,60060,60060,120120,120120,180180,180180,180180,180180,360360,360360,360360,360360,471240,510510,},
            {1,30,240,1170,3960,9240,9240,13860,13860,16380,16380,27720,30030,32760,60060,60060,60060,60060,120120,120120,180180,180180,180180,180180,360360,360360,360360,360360,471240,510510,556920,},
            {1,31,255,1287,4095,9240,13860,13860,16380,16380,27720,30030,32760,60060,60060,60060,60060,120120,120120,180180,180180,180180,180180,360360,360360,360360,360360,471240,510510,556920,1021020,},
    };
}
